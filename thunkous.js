// Generated by CoffeeScript 1.8.0
(function() {
  var base, defineMemoizedPerInstanceProperty, proxyAll, proxyBuilder, thunkify, _i, _len, _ref,
    __slice = [].slice;

  thunkify = require('thunkify');

  module.exports = thunkify;

  proxyAll = function(src, target, proxyFn) {
    var key, _fn, _i, _len, _ref;
    _ref = Object.keys(src);
    _fn = function(key) {
      if (Object.prototype[key] != null) {
        return;
      }
      if (Object.getOwnPropertyDescriptor(src, key).get != null) {
        return;
      }
      if (typeof src[key] !== 'function') {
        return;
      }
      return target[key] = proxyFn(key);
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      _fn(key);
    }
    return target;
  };

  proxyBuilder = function() {
    return function(that) {
      var func, result;
      result = typeof that === 'function' ? (func = thunkify(that), Object.getPrototypeOf(that) !== Function.prototype ? func.__proto__ = Object.getPrototypeOf(that)['thunk'] : void 0, func) : Object.create(Object.getPrototypeOf(that) && Object.getPrototypeOf(that)['thunk'] || Object.prototype);
      result.that = that;
      return proxyAll(that, result, function(key) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.that[key]['thunk'].apply(this.that, args);
        };
      });
    };
  };

  defineMemoizedPerInstanceProperty = function(target, propertyName, factory) {
    var cacheKey;
    cacheKey = "__fibrous" + propertyName + "__";
    return Object.defineProperty(target, propertyName, {
      enumerable: false,
      set: function(value) {
        delete this[cacheKey];
        return Object.defineProperty(this, propertyName, {
          value: value,
          writable: true,
          configurable: true,
          enumerable: true
        });
      },
      get: function() {
        if (!(Object.prototype.hasOwnProperty.call(this, cacheKey) && this[cacheKey])) {
          Object.defineProperty(this, cacheKey, {
            value: factory(this),
            writable: true,
            configurable: true,
            enumerable: false
          });
        }
        return this[cacheKey];
      }
    });
  };

  _ref = [Object.prototype, Function.prototype];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    base = _ref[_i];
    defineMemoizedPerInstanceProperty(base, 'thunk', proxyBuilder());
  }

}).call(this);
